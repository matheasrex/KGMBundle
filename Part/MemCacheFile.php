<?

namespace KGMBundle\Part;

use KGMBundle\Handler\MemcacheHandler;
use KGMBundle\Repository\RepositoryInterface;

/**
 * class for memcachefile
 */
class MemCacheFile extends CacheFile
{
	
	/** 
	 * @var \KGMBundle\Handler\MemcacheHandler $memCache MemcacheHandler object
	 *
	 * @access protected
	 */
	protected $memCache = null;
	
	/**
	 * @var string $memCacheKey MemCache key generated by path
	 *
	 * @access protected
	 */
	protected $memCacheKey = '';
	
	/**
	 * @var int $memCacheExpire MemCache expire time
	 *
	 * @access protected
	 */
	protected $memCacheExpire = 84600;
	
	/**
	 * @var bool $isShared True if cache is shared
	 *
	 * @access protected
	 */
	protected $isShared = true;
	
	/**
	 * public constructor
	 *
	 * @param string          $path    Path of text file
	 * @param MemcacheHandler $handler Handler object
	 * @param int             $flag    Options
	 *
	 * @access public
	 * @link {memCache}
	 */
	public function __construct($path, MemcacheHandler $handler = null, $flag = self::LOAD_AUTO)
	{
		$this->memCacheKey = $this->getCachePath($path, false);
		
		$enableAutoLoad = $this->enableAutoLoad;
		$this->enableAutoLoad = false;
		parent::__construct($path, null, $flag);
		$this->enableAutoLoad = $enableAutoLoad;
		
		$this->memCache = $handler;
		
		if (
			($this->flag & self::LOAD_AUTO) &&
			$this->enableAutoLoad
		) {
			$this->loadCache();
		}
	}
	
	/**
	 * set memcache object
	 *
	 * @param MemcacheHandler $memCache MemcacheHandler object
	 *
	 * @access public
	 * @link {memCache}
	 */
	public function setMemCache(MemcacheHandler $memCache)
	{
		$this->memCache = $memCache;
	}
	
	/**
	 * return memcache object
	 *
	 * @return MemcacheHandler MemcacheHandler object
	 *
	 * @access public
	 */
	public function getMemCache()
	{
		return $this->memCache;
	}
	
	/**
	 * return generated memcache key
	 *
	 * @return string MemCache key
	 *
	 * @access public
	 */
	public function getMemCacheKey()
	{
		return $this->memCacheKey;
	}
	
	/**
	 * set memcache expire time in seconds
	 *
	 * @param int $expire Expire time interval
	 *
	 * @access public
	 * @link {memCacheExpire}
	 */
	public function setMemCacheExpire($expire)
	{
		$this->memCacheExpire = $expire;
	}
	
	/**
	 * return memcache expire time
	 *
	 * @return int MemCache expire
	 *
	 * @access public
	 */
	public function getMemCacheExpire()
	{
		return $this->memCacheExpire;
	}
	
	/**
	 * save cache file and set memcache
	 *
	 * @return bool True if save needed
	 *
	 * @access protected
	 */
	protected function saveCache()
	{
		if (!$this->isWriteable() || parent::saveCache()) {
			$this->saveMemCache();
			
			return true;
		}
		
		return false;
	}
	
	/**
	 * save content to memcache
	 *
	 * @return bool True if saved
	 *
	 * @access protected
	 */
	protected function saveMemCache()
	{
		if ($this->memCache) {
			$this->memCache->set($this->memCacheKey, $this->content, 0, $this->memCacheExpire);
			$this->content = '';
			
			return true;
		}
		
		return false;
	}
	
	/**
	 * load cache from memcache
	 * if not found, then load cache file and save contant to memcache
	 *
	 * @access protected
	 */
	protected function loadCache()
	{
		if (
			$this->memCache &&
			($this->content = $this->memCache->get($this->memCacheKey))
		) {
			$this->cache = unserialize($this->content);
			$this->content = '';
		} elseif ($this->isReadable()) {
			parent::loadCache();
			$this->content = serialize($this->cache);
			$this->saveMemCache();
		}
	}
}
